// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241127150825_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Categories.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("19b32952-5213-4d09-b266-9e397ed255b6"),
                            Name = "Development"
                        },
                        new
                        {
                            Id = new Guid("5601baac-28b7-46bb-961c-0adcff6031c4"),
                            Name = "Documentary"
                        },
                        new
                        {
                            Id = new Guid("c8bcf643-34d5-4daa-940d-ce504ffed554"),
                            Name = "Learning"
                        });
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("content");

                    b.Property<DateTime>("PostedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("posted_at")
                        .HasDefaultValueSql("timezone('utc',now())");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_comments");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_comments_project_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Domain.Priorities.ProjectPriority", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_priorities");

                    b.ToTable("project_priorities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c6c1670d-cb51-49a5-9392-70e93eb24fd4"),
                            Name = "Very Low"
                        },
                        new
                        {
                            Id = new Guid("c9a5e8df-8171-492d-86de-e88368f0480f"),
                            Name = "Medium"
                        },
                        new
                        {
                            Id = new Guid("facf389d-c7a0-4902-847d-72aac04b73e5"),
                            Name = "High"
                        },
                        new
                        {
                            Id = new Guid("0c4d463d-1f50-42ae-bae6-b4a2c010e984"),
                            Name = "Very High"
                        });
                });

            modelBuilder.Entity("Domain.ProjectUsers.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("project_user_id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectUserId")
                        .HasName("pk_project_users");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_users_project_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_users_user_id");

                    b.ToTable("project_users", (string)null);
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update")
                        .HasDefaultValueSql("timezone('utc',now())");

                    b.Property<Guid>("ProjectPriorityId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_priority_id");

                    b.Property<Guid>("ProjectStatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_status_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("ProjectId")
                        .HasName("pk_projects");

                    b.HasIndex("ProjectPriorityId")
                        .HasDatabaseName("ix_projects_project_priority_id");

                    b.HasIndex("ProjectStatusId")
                        .HasDatabaseName("ix_projects_project_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_projects_user_id");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("Domain.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ea37203-d0fd-429b-b4bf-37558527d306"),
                            Name = "User"
                        },
                        new
                        {
                            Id = new Guid("79ab8d1e-7bdd-4360-9275-2174e13a3b3c"),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Domain.Statuses.ProjectStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_project_statuses");

                    b.ToTable("project_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7328c628-b4a6-48d3-ba25-d906f3a045c8"),
                            Name = "Started"
                        },
                        new
                        {
                            Id = new Guid("ac7e5106-ad52-42e3-9b7c-d2996d7bbdce"),
                            Name = "In progress"
                        },
                        new
                        {
                            Id = new Guid("7e6ecfdd-d43a-4ebf-945f-e22b58a04a5d"),
                            Name = "Finished"
                        });
                });

            modelBuilder.Entity("Domain.Tags.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_tags");

                    b.ToTable("tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d16c256-bff5-48f9-90b1-5cfb9b1707d0"),
                            Name = "school"
                        },
                        new
                        {
                            Id = new Guid("722c0bb6-4629-4e16-98ae-b9c72128a671"),
                            Name = "dotnet"
                        },
                        new
                        {
                            Id = new Guid("0c438a3a-3627-4426-b666-f5bfb50454b9"),
                            Name = "work"
                        },
                        new
                        {
                            Id = new Guid("f9ccd01b-3523-4586-8f2b-eb982bbecd51"),
                            Name = "petproject"
                        },
                        new
                        {
                            Id = new Guid("5db3e9e2-51fd-4c1e-82e4-e9ebe350fe75"),
                            Name = "coding"
                        },
                        new
                        {
                            Id = new Guid("863de1f4-c2b5-44ac-bff4-7ea0c23de679"),
                            Name = "python"
                        },
                        new
                        {
                            Id = new Guid("997aa338-c159-474b-8e39-00a9e501411c"),
                            Name = "university"
                        },
                        new
                        {
                            Id = new Guid("5e79485c-4f8e-4ebb-a72b-bbdd801c5bc2"),
                            Name = "database"
                        },
                        new
                        {
                            Id = new Guid("db9a7faf-628a-4bf4-a16d-adc572fee68c"),
                            Name = "datastructure"
                        });
                });

            modelBuilder.Entity("Domain.TagsProjects.TagsProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid")
                        .HasColumnName("tag_id");

                    b.HasKey("Id")
                        .HasName("pk_tags_projects");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_tags_projects_project_id");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_tags_projects_tag_id");

                    b.ToTable("tags_projects", (string)null);
                });

            modelBuilder.Entity("Domain.Tasks.ProjectTask", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("boolean")
                        .HasColumnName("is_finished");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_id");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_description");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("TaskId")
                        .HasName("pk_project_tasks");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_project_tasks_category_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_tasks_project_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_project_tasks_user_id");

                    b.ToTable("project_tasks", (string)null);
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<Guid?>("ProjectTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("project_task_id");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("ProjectTaskId")
                        .HasDatabaseName("ix_users_project_task_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.ToTable("users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c1ec16d-8d20-4e13-a0c5-b87f0e9e61e2"),
                            Email = "user@gmail.com",
                            Password = "userPass",
                            RoleId = new Guid("4ea37203-d0fd-429b-b4bf-37558527d306"),
                            UserName = "user"
                        },
                        new
                        {
                            Id = new Guid("9c499dc9-35c4-4702-aab8-a049e62398a9"),
                            Email = "admin@gmail.com",
                            Password = "adminPass",
                            RoleId = new Guid("79ab8d1e-7bdd-4360-9275-2174e13a3b3c"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_comments");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_comments");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ProjectUsers.ProjectUser", b =>
                {
                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_projectuser_project");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany("ProjectUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_projectuser_user");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.HasOne("Domain.Priorities.ProjectPriority", "ProjectPriority")
                        .WithMany()
                        .HasForeignKey("ProjectPriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_priority_id");

                    b.HasOne("Domain.Statuses.ProjectStatus", "ProjectStatus")
                        .WithMany()
                        .HasForeignKey("ProjectStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_status_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_id");

                    b.Navigation("ProjectPriority");

                    b.Navigation("ProjectStatus");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.TagsProjects.TagsProject", b =>
                {
                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany("TagsProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tagprojects_project_id");

                    b.HasOne("Domain.Tags.Tag", "Tag")
                        .WithMany("TagsProjects")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tagprojects_tag_id");

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Domain.Tasks.ProjectTask", b =>
                {
                    b.HasOne("Domain.Categories.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_task_category_id");

                    b.HasOne("Domain.Projects.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_task_project_id");

                    b.HasOne("Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_project_user_id");

                    b.Navigation("Category");

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.HasOne("Domain.Tasks.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_user_project_task_id");

                    b.HasOne("Domain.Roles.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_id");

                    b.Navigation("ProjectTask");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Projects.Project", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProjectUsers");

                    b.Navigation("TagsProjects");
                });

            modelBuilder.Entity("Domain.Tags.Tag", b =>
                {
                    b.Navigation("TagsProjects");
                });

            modelBuilder.Entity("Domain.Users.User", b =>
                {
                    b.Navigation("ProjectUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
